server {
  # Don't use the port 80 as it may not be allowed by security policy at container runtime.
  # Expose it in Dockerfile
  listen ${NGINX_PORT};
  root   /app;
  index  index.html;

  # Remove version in Server: header
  server_tokens off;

  # API Proxy
  location ${NGINX_PROXY_PATH}/ {
    proxy_set_header   X-Real-IP        $remote_addr;
    proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
    proxy_set_header   X-NginX-Proxy    true;
    proxy_set_header   Connection       "";
    proxy_http_version 1.1;
    proxy_pass         ${NGINX_PROXY_TARGET_URL}/;
  }

  # Websockets proxy
  # I couldn't make it work with ${NGINX_WEBSOCKET_PROXY_PATH}
  # See https://stackoverflow.com/a/29232687
  location ~* \.io {
    proxy_http_version 1.1;
    proxy_set_header   X-Real-IP        $remote_addr;
    proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
    proxy_set_header   X-NginX-Proxy    false;
    proxy_set_header   Upgrade          $http_upgrade;
    proxy_set_header   Connection       "Upgrade";
    proxy_pass         ${NGINX_WEBSOCKET_PROXY_TARGET_URL};
    proxy_redirect off;
  }

  # Makes sure index.html is never cached by the browser and by fastly
  location ~* (service-worker\.tangram\.js|\.(?:manifest|appcache|html?|xml|json))$ {
    expires    -1;
    add_header Cache-Control "no-store, private";
    try_files  $uri @rewrites;

    include /etc/nginx/snippets/add_security_headers.conf;
  }

  # Serves and caches assets
  # Any route containing a file extension (e.g. /main.js)
  location ~ ^.+\..+$ {
    try_files  $uri =404;
    expires    1y;
    access_log off;

    add_header Cache-Control "public";
    # when serving user-supplied content,
    # include a X-Content-Type-Options: nosniff header along with the Content-Type: header.
    add_header X-Content-Type-Options nosniff;

    include /etc/nginx/snippets/add_security_headers.conf;
  }

  location / {
    try_files $uri $uri/ @rewrites;

    include /etc/nginx/snippets/add_security_headers.conf;
  }

  # If no asset matches, send it to your javascript app. Hopefully it's a route in the app!
  location @rewrites {
    rewrite ^(.+)$ /index.html last;
  }
}
